{"ast":null,"code":"var _jsxFileName = \"/Users/new/Documents/PET-project`s/movie-search-app-personal-project-v1.1/src/pages/Favorites/Favorites.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { MovieList } from \"components/MovieList/MovieList\";\nimport { getMovieById } from \"services/getMovies\";\nimport { removeFromFavorites } from \"store/favorites/favoritesSlice\";\nimport { useSelectFavoriteMovies } from \"store/favorites/favoritesSelectors\";\nimport { useGetMovieByIdQuery } from \"services/getMoviesRTK\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Favorites = () => {\n  _s();\n  const favoriteMovieIds = useSelectFavoriteMovies();\n  const [favoriteMovies, setFavoriteMovies] = useState([]);\n\n  //////\n  const favFunc = useGetMovieByIdQuery();\n  useEffect(() => {\n    const fetchFavoriteMovies = async () => {\n      const moviePromises = favoriteMovieIds.map(id => favFunc(id));\n      const movies = await Promise.all(moviePromises);\n      setFavoriteMovies(movies);\n    };\n    fetchFavoriteMovies();\n  }, [favoriteMovieIds, favFunc]);\n\n  /////////////////////////\n  /////////////////////////\n  //старый useEffect\n  // useEffect(() => {\n  //   const fetchFavoriteMovies = async () => {\n  //     const moviePromises = favoriteMovieIds.map((id) => getMovieById(id));\n  //     const movies = await Promise.all(moviePromises);\n  //     setFavoriteMovies(movies);\n  //   };\n\n  //   fetchFavoriteMovies();\n  // }, [favoriteMovieIds]);\n\n  const handleRemoveFavorite = movieId => {\n    removeFromFavorites(movieId);\n    setFavoriteMovies(prevFavoriteMovies => prevFavoriteMovies.filter(prevFavoriteMovieId => prevFavoriteMovieId !== movieId));\n  };\n  return /*#__PURE__*/_jsxDEV(MovieList, {\n    movies: favoriteMovies,\n    onRemoveFavorite: handleRemoveFavorite\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(Favorites, \"010aQLU1bxiwOFRM4M2Aqz416cw=\", false, function () {\n  return [useSelectFavoriteMovies, useGetMovieByIdQuery];\n});\n_c = Favorites;\nexport default Favorites;\nvar _c;\n$RefreshReg$(_c, \"Favorites\");","map":{"version":3,"names":["React","useEffect","useState","MovieList","getMovieById","removeFromFavorites","useSelectFavoriteMovies","useGetMovieByIdQuery","jsxDEV","_jsxDEV","Favorites","_s","favoriteMovieIds","favoriteMovies","setFavoriteMovies","favFunc","fetchFavoriteMovies","moviePromises","map","id","movies","Promise","all","handleRemoveFavorite","movieId","prevFavoriteMovies","filter","prevFavoriteMovieId","onRemoveFavorite","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/new/Documents/PET-project`s/movie-search-app-personal-project-v1.1/src/pages/Favorites/Favorites.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { MovieList } from \"components/MovieList/MovieList\";\nimport { getMovieById } from \"services/getMovies\";\n\nimport { removeFromFavorites } from \"store/favorites/favoritesSlice\";\nimport { useSelectFavoriteMovies } from \"store/favorites/favoritesSelectors\";\nimport { useGetMovieByIdQuery } from \"services/getMoviesRTK\";\n\nconst Favorites = () => {\n  const favoriteMovieIds = useSelectFavoriteMovies();\n\n  const [favoriteMovies, setFavoriteMovies] = useState([]);\n\n  //////\n  const favFunc = useGetMovieByIdQuery();\n\n  useEffect(() => {\n    const fetchFavoriteMovies = async () => {\n      const moviePromises = favoriteMovieIds.map((id) => favFunc(id));\n      const movies = await Promise.all(moviePromises);\n      setFavoriteMovies(movies);\n    };\n\n    fetchFavoriteMovies();\n  }, [favoriteMovieIds, favFunc]);\n\n  /////////////////////////\n  /////////////////////////\n  //старый useEffect\n  // useEffect(() => {\n  //   const fetchFavoriteMovies = async () => {\n  //     const moviePromises = favoriteMovieIds.map((id) => getMovieById(id));\n  //     const movies = await Promise.all(moviePromises);\n  //     setFavoriteMovies(movies);\n  //   };\n\n  //   fetchFavoriteMovies();\n  // }, [favoriteMovieIds]);\n\n  const handleRemoveFavorite = (movieId) => {\n    removeFromFavorites(movieId);\n    setFavoriteMovies((prevFavoriteMovies) =>\n      prevFavoriteMovies.filter(\n        (prevFavoriteMovieId) => prevFavoriteMovieId !== movieId\n      )\n    );\n  };\n\n  return (\n    <MovieList\n      movies={favoriteMovies}\n      onRemoveFavorite={handleRemoveFavorite}\n    />\n  );\n};\n\nexport default Favorites;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SAASC,YAAY,QAAQ,oBAAoB;AAEjD,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,SAASC,uBAAuB,QAAQ,oCAAoC;AAC5E,SAASC,oBAAoB,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,gBAAgB,GAAGN,uBAAuB,CAAC,CAAC;EAElD,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA,MAAMa,OAAO,GAAGR,oBAAoB,CAAC,CAAC;EAEtCN,SAAS,CAAC,MAAM;IACd,MAAMe,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,MAAMC,aAAa,GAAGL,gBAAgB,CAACM,GAAG,CAAEC,EAAE,IAAKJ,OAAO,CAACI,EAAE,CAAC,CAAC;MAC/D,MAAMC,MAAM,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACL,aAAa,CAAC;MAC/CH,iBAAiB,CAACM,MAAM,CAAC;IAC3B,CAAC;IAEDJ,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACJ,gBAAgB,EAAEG,OAAO,CAAC,CAAC;;EAE/B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA,MAAMQ,oBAAoB,GAAIC,OAAO,IAAK;IACxCnB,mBAAmB,CAACmB,OAAO,CAAC;IAC5BV,iBAAiB,CAAEW,kBAAkB,IACnCA,kBAAkB,CAACC,MAAM,CACtBC,mBAAmB,IAAKA,mBAAmB,KAAKH,OACnD,CACF,CAAC;EACH,CAAC;EAED,oBACEf,OAAA,CAACN,SAAS;IACRiB,MAAM,EAAEP,cAAe;IACvBe,gBAAgB,EAAEL;EAAqB;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEN,CAAC;AAACrB,EAAA,CA9CID,SAAS;EAAA,QACYJ,uBAAuB,EAKhCC,oBAAoB;AAAA;AAAA0B,EAAA,GANhCvB,SAAS;AAgDf,eAAeA,SAAS;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}